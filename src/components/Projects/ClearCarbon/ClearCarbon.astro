---
import Project from "@/components/Project.astro";
import registration from "./registration.png";
import businesses from "./businesses.png";
import report from "./report.png";
---

<Project
  title="Clear Carbon Solutions"
  images={[
    { image: registration, alt: "Registration Page" },
    { image: businesses, alt: "Businesses Tab" },
    { image: report, alt: "Final Report" },
  ]}
>
  <p>
    With my colleagues <a href="https://www.linkedin.com/in/mathew-emshey/"
      >Matt</a
    >
    and <a href="https://www.linkedin.com/in/church-william/">Will</a> we are building
    a platform for businesses and municipalities to keep track of carbon emissions.
    We <a href="https://www.linkedin.com/in/church-william/">will</a> provide value
    to our clients by allowing them use already on hand data to generate a carbon
    report via our "turbo-tax style" interface. We'll also be giving feedback on
    how they reduce their emissions - ultimately reducing operating costs and environmental
    impact. Through working with the Genesis Center we've received a great deal of
    validation and support, we're excited to get customers on board! <a
      href="https://clearcarbon.solutions/"
      >Check out their website for more info</a
    >
  </p>
  <p>
    My role in the project being the one and only full-stack developer has been
    quite the learning experience. As my first real deep dive into the modern
    web (since piczo in 2007), I took the opportunity to learn how it has
    evolved, working with a flask/jquery frontend and FastAPI backend, to
    exploring GraphQL for type-safe interoperability between the client and
    server, and finally ending up in React land where things got more
    interesting.
  </p>
  <blockquote class="ramble">
    <p>
      React seemed to be a fantastic alternative to the HTML/jQuery soup I was
      scaffolding with (which I knew was unmaintable). I got to work reading
      through documentation, asking questions (thanks <a
        href="https://jackharrhy.dev/">Jack ❤️</a
      >) and began ported over my existing frontend to a React and the soon to
      be underdog React Router to create an SPA (far better than jinja template
      SSR).
    </p>
    <p>
      At this point I was pretty satisfied with both stacks. Using the two
      excellent libraries <a href='https://tanstack.com/query/"'
        >Tanstack-Query</a
      > and <a href="https://strawberry.rocks/">Strawberry</a>, I have GraphQL's
      type-safe messaging between the client and server. This could have been
      good enough, but as my understanding of the React Router grew, I knew I
      could do better.
    </p>
    <p>
      I'd like to introduce <a href="https://remix.run/">Remix</a>, a superset
      of React Router which bundles a node SSR backend and hydrates your page
      with server data. This means to achieve full-stack data flow, all you have
      to do is create a loader (or action for mutations) function in the same
      file as your frontend code, and it's ran on the server on page load. This
      model of development has been a Godsend as there's less contexual overhead
      from switching between two different environments. I am now quite happy
      with this and I feel I've earned it.
    </p>
  </blockquote>
</Project>
